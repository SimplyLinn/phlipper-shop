import { readFileSync, writeFileSync } from "node:fs";
import HeatshrinkDecoder from './Heatshrink/decoder.js'
import HeatshrinkEncoder from "./Heatshrink/encoder.js";

/**
 * Uncompressed:
 *  byte 0 byte 1...1024 
 * +------+------+------+
 * | 0x00 | ...IMG_DATA |
 * +------+------+------+
 * 
 * Compressed (Heatshrink 8,4):
 *  byte 0 byte 1   byte 2...3  byte 4...XXX
 * +------+------+------+------+------+------+
 * | 0x01 | 0x00 | Size 16 bit | ...IMG_DATA |
 * +------+------+------+------+------+------+
 * 
 */
const fileBuffer = readFileSync("./NSFW/Anims/lvl_1/frame_1.bm");

enum CompressionAlgorithm {
  UNCOMPRESSED = -0x01,
  HEATSHRINK_8_4 = 0x00
}

if (fileBuffer[0] === 0x00) {
  console.log('UNCOMPRESSED FILE');
  process.exit(1);
}

const decoder = new HeatshrinkDecoder({
  windowSize2: 8,
  lookaheadSize2: 4,
});

const encoder = new HeatshrinkEncoder({
  windowSize2: 8,
  lookaheadSize2: 4,
})

const arrs: Uint8Array[] = [];

const orgEncodedBuffer = fileBuffer.subarray(4);
console.log('Org Encoded Size:', orgEncodedBuffer.length);

for (const chunk of decoder.sinkRead(orgEncodedBuffer)) {
  arrs.push(chunk)
}

console.log('Ord Decoded Arrs:', arrs.map(({ length }) => length))

// const buf = Buffer.from('\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff?\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x80\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x00\x00\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\x00\x00\xf8\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\xf0\xff\xff\xff\xff\x7f\x00\xff\xff\xff\xff\xff\x7f\x00\x00\x0f\xc0\xff\xff\xff\xff\x1f\x00\xff\xff\xff\xff\xff?\x00\xc0\x7f\x00\xff\xff\xff\xff\x07\x00\xff\xff\xff\xe0\xff\x1f\x00\xf0\xff\x03\xfe\xff\xff\xff\x03\x00\xff\xff?\x80\xff\x1f\x00\xfc\xff\x1f\xf8\xff\xff\xff\x01\x00\xff\xff\x07\x00\xff\x0f\x00\xff\xff?\x00\xff\xff\xff\x00\xe0\xff\xff\x03\x00\xf0\x07\x00\xfe\xff\xff\x00\xe0\xff\x7f\x00\xf0\xff\xff\x01\x00\xe0\x07\x00\xf8\xff\xff\x00\x00\xfe?\x00\xfc\xff\xff\x00\x00\x00\x03\x00\xe0\xff\x7f\x00\x00\x00\x00\x00\xff\xff\xff\x00\x00\x00\x00\x00\xc0\xff\x1f\x00\x00\x00\x00\xc0\xff\xff\xff\x00\x00\x00\x00\x00\xc0\xff\x07\x00\x00\x00\x00\xf0\xff\xff\xff\x00\x00\x00\x00\x00\x80\xff\x03\x00\x00\x00\x00\xf8\xff\xff\xff\x01\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x01\x00\x00\x00\x00\x00~\x00\x00\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\xf0\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\xff\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\xff\xff\xff\xff\xff\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\xff\xff\xff\xff\xff\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\xff\xff\xff\x7f\xf8\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xc1?\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff?\x00\x1f\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x87\xff\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc3\xff\x03\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe3\xff\x1f\x00\xfc\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xe3\xff\xff\x80\xff\xff\xff\xff\x03\x00\x00\x00\x00\x00\xf6\xfe\xe3\xff\xff\xff\xff\xff\xff\xff\x0f\x00\x00\x00\x80\xff\xff\xff\xe3\xff\xff\xff\xff\xff\xff\xff\x1f\x00\x00\x00\xf0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x00\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', 'binary');
const ordDecodedBuf = Buffer.concat(arrs);
arrs.length = 0;

console.log('Org Decoded Size:', ordDecodedBuf.length);

for (const chunk of encoder.sinkRead(orgEncodedBuffer)) {
  arrs.push(chunk)
}

console.log('Re-Encoded Arrs:', arrs.map(({ length }) => length))

const reEncBuf = Buffer.concat(arrs);
arrs.length = 0;

console.log(Array.prototype.map.call(reEncBuf, (n, i) => [i, n, orgEncodedBuffer[i]]).filter(([i, v1, v2]) => v1 !== v2))

console.log('Re-Encoded Size:', reEncBuf.length);

decoder.reset();
for (const chunk of decoder.sinkRead(orgEncodedBuffer)) {
  arrs.push(chunk)
}

console.log('Re-Decoded Arrs:', arrs.map(({ length }) => length))

const reDecodedBuf = Buffer.concat(arrs);

console.log('Re-Decoded Size:', reDecodedBuf.length);

for (let j = 0; j < 64; j++) {
  for (let i = 0; i < 16; i++) {
    const byte = reDecodedBuf[j * 16 + i];
    for (let k = 0; k < 8; k++) {
      const bit = (byte >> k) & 1;
      process.stdout.write(bit ? "â–ˆ" : " ");
    }
  }
  process.stdout.write("\n");
}

